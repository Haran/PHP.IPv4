<pre>
<?php

require_once('IPv4\IPv4.php');
$net = new IPv4();


var_dump(
    $net->mask('0xff.0x00.0xff.0x00')->isValid()
);

/**
 * Проверка айпишки
 * $net->address('62.205.205.2')->isValid()
 *
 * Проверка подсетки
 * $net->mask('255.255.255.0')->isValid()
 * $net->address('62.205.205.2')->mask('255.255.255.0')->isValid()  вернёт true
 * $net->address('62.205.205.2')->mask('255.255.255.0')->isValid(1) вернёт false, т.к. запускается strict проверка, которая подразумевает, что в ip() передан адрес подсети, а не просто ip'шник
 *
 * Получение формата IP-адреса
 * Проверяя формат подсети, всегда проверяйте её isValid()
 * $net->address('255.255.255.255')->getFormat()
 *
 * Получение IP-адреса в удобочитаемом формате
 * $net->address('0xffffffff')->getHumanReadable()
 *
 * Конвертация IP-адреса из формата в формат
 * При конвертации подсетки в CIDR
 * $net->address('0xc0.0xA8.0xFF.0x6D')->convertTo('Long')
 *
 * Получение адреса сети по IP и маске
 * $net->address('62.205.205.2')->mask('255.255.255.0')->getAddress()
 *
 * Проверка, является ли переданный адрес адресом подсети
 * $net->address('62.205.205.255')->mask('255.255.255.0')->isSubnet()
 *
 * Получение диапазона IP-адресов по адресу сети и маске
 * $net->address('62.205.205.2')->mask('255.255.255.0')->getRange()
 *
 * Получение количества доступных IP-адресов в подсети. Broadcast адрес исключается.
 * $net->address($add)->mask($sub)->countHosts()
 *
 * Получение broadcast адреса подсети.
 * $net->address($add)->mask($sub)->getBroadcast()
 *
 * Проверка, является ли переданный IP-адрес broadcast адресом
 * $net->address($add)->mask($sub)->isBroadcast()
 *
 * Проверка, попадает ли переданный IP адрес в заданную подсеть.
 * В ->address($add) можно использовать не только адрес подсети, но и обычный IP, вычисляя таким образом находятся ли IP'шки в одной и той же подсети.
 * $net->address($add)->mask($sub)->has('62.205.205.129')
 *
 * Получение максимального CIDR-блока, в который может вписаться данная подсеть.
 * Ну или айпишник, но в случае с конечным айпишником это всегда будет /32 блок. Что вроде бы логично.
 * $net->address('192.168.1.0')->getMaxBlock()
 */

